#include<iostream>
using namespace std;

struct node {
int data;
node *left;
node *right;
};

class BST {

private:
node *root;

public:
BST() {
root = NULL;
}

bool check_left(node *temp) {
if (temp->left == NULL) {
return true;
}
else return false;
}

bool check_right(node *temp) {
if (temp->right == NULL)
return true;
else return false;
}

bool is_greater(int val, int val_1) {
if (val > val_1)
return true;
else return false;
}

node* Create(int data) {
node *Node = new node();
Node->data = data;
Node->left == NULL;
Node->right == NULL;
return Node;
}

void Insertion(node *temp, int data) {
if (root == NULL) {
root = Create(data);
return;
}
if (is_greater(temp->data, data)) {
if (check_left(temp)) {
temp->left = Create(data);
return;
}
else Insertion(temp->left, data);

}
else {
if (check_right(temp)) {
temp->right = Create(data);
temp->right->left = temp->right->right = NULL;
return;
}
else Insertion(temp->right, data);
}

}

node *Get_Root() {
return root;
}



node search(node root_iter, int x)
{ 
    if (x == root_iter->data){

        return root_iter;
    }
 
if (root_iter->data <x){
cout<<"the key is at right of root"<<endl;
  search(root_iter->right, x);
} 
if(root_iter->data >x){

cout<<"key is at left of root"<<endl;
  search(root_iter->left, x);
}
}
void inorder(node *root) {
		if (root == NULL)
			return;
		inorder(root->left);
		cout << root->data;
		inorder(root->right);
	}

	int counter(node *root )
	{
      if (root == NULL)  
      {
            return 0;  
               
      }
        else             
     return(counter(root->right) +counter(root->left))+1; 

	}


// **Part A**
    int count_nodes(node* iter, int val, int count=0){
        

        if( iter==NULL )
    {
           return count;
    }else if (val>iter->data)
    {
       return count_nodes(iter->right,val,count);
    }
   

    else if (val<iter->data)
    {
       return count_nodes(iter->left,val,count);
    }
     else if (iter->data==val)
    {
       
        return counter(iter);
    }
    
    else
      
        return count;
		
    }


int MIXIMAXA(node* root) {
if(root == NULL) {
return 0;
} 
int left_counter = 0;
int right_counter = 0;
if(root->left != NULL) {
left_counter = MIXIMAXA(root->left) +1 ;
}
if(root->right != NULL) {
right_counter = MIXIMAXA(root->right) +1 ;
}

if(left_counter > right_counter) {
return left_counter;
} 
else 
return right_counter; 

}
// *****Part-B*******
int left_most_node(node *root_iter){
return MIXIMAXA(root_iter);

}

int rightLeafSum(node *root, int *sum){ 
if(root==NULL) 
return 0; 
if(root->right) 
if(root->right->left==NULL && 
root->right->right==NULL) 
*sum += root->right->data; 
rightLeafSum(root->left, sum); 
rightLeafSum(root->right, sum);
return *sum; 
} 
// *******PART-C*******
int right_leaves(node* root_iter){
int sum = 0; 
rightLeafSum(root, &sum);
return sum;
} 

void get_diff(node* root,int &l_val,int &result) {
if (!root) return;
if (root->left) 
get_diff(root->left, l_val, result);
if (l_val!=-2147483647) 
result = min(root->data-l_val,result);
l_val = root->data;
if (root->right) 
get_diff(root->right, l_val, result);
}
int min_diff_bst(node* root) {
int result = 2147483647;
int l_val = -10000;
get_diff(root, l_val,result);
return result;
}
// ********PART-D*******
int min_diff(node* root_iter, int diff=0)
{ int result = 2147483647;
int lastValue = -10000;
get_diff(root,lastValue,result);
return result;
}

}; 

int main() {
BST bst;
bst.Insertion(bst.Get_Root(), 21);
bst.Insertion(bst.Get_Root(), 23);
bst.Insertion(bst.Get_Root(), 6);
bst.Insertion(bst.Get_Root(), 3);
bst.Insertion(bst.Get_Root(), 72);
bst.Insertion(bst.Get_Root(), 12);
bst.inorder(bst.Get_Root());
bst.count_nodes(bst.Get_Root(),6,0);
bst.search(bst.Get_Root(),21);
bst.left_most_node(bst.Get_Root()); 
bst.right_leaves(bst.Get_Root());
bst.min_diff(bst.Get_Root());
